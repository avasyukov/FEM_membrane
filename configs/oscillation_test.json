# This is a config file for FEM_membrane test runs
# By default, the module assembles the grid and stores it in specified directory for further use
# If "Run" block is specified, it would also do simulations and store visualisation results
# PS: you can add/delete comments as long as they are on a separate line starting with '#'
{
	"Grid" :
	{
		"pickle_file" : "../pickles/from_config/packed_test",
		# name of file to store serialized (pickle format) grid
		"Geometric" :
		# geometric properties of grid
		{
			"type" : "uniform_rect",
			# the type of grid generation
			# uniform rect creates rectangular grid composed of smaller rectangles,
			# split into triangles by diagonal
			# TODO: gmesh target
			"L_x" : 5.0e-2,
			"L_y" : 1.8e-2,
			# rectangle sizes in x and y directions respectievely, [m]
			"n_y" : 9,
			"n_x" :	25
			#"perf_step_x" : 5,
			#"perf_step_y" : 6
			# if both are specified then grid supports perforation
			# make hole instead of each perf_step_x, y square of grid
		},
		"rho" : 1650.0,
		# density, [kg/m^3]
		"h" : 5e-4,
		# thickness, [m]
		"damping" : {"alpha" : 1.0, "beta" : 1.0},
		# Rayleigh damping C = alpha*M + beta*K

		"Elastic" :
		# Elastic properties of material
		{
			"E" : 1e10,
			"nu" : 0.0
			# if "D" is specified, fill in all 21 elastic constants
			# you may fill only the upper triangle of the matrix
			# lower will be discarded anyway
			#"D" :  [	[151.0,  48.0,  26.0,   9.6,   0.0,   0.0],
			#			[0    , 101.0,  61.7,  -0.3,   0.0,   0.0],
			#			[0    ,     0, 158.2,  -8.0,   0.0,   0.0],
			#			[0    ,     0,     0,   33.5,  0.0,   0.0],
			#			[0    ,     0,     0,      0, 37.0,  -5.6],
			#			[0    ,     0,     0,      0,    0,  21.4]],
			#"unit": "GPa"	
		},  
		"Constraints" :
		{
			"Displacement" : ["left"]
			# Specify which points are fixed (u, v, w := 0)
			# Can be "top", "bottom", "left", "right" --- fix respective sides of membrane
			#         "border"  --- fix all four sides
			# [x, y]  --- will find the closest grid vertex
			#"Velocity" : [{"v" : [0.0, 0.0, 100.0], "locs" : "bottom"}]
			# Specifiy which points have fixed velocities
			# "v" --- 3-array of velocities, "locs" --- array (or single element) of
			# location specifiers (same as with displacements)
			# "Velocity" : [{"v" : [0.0, 0.0, 1.0], "locs" : [[0.5, 0.6], "bottom"]},
			#   {"v" : [0.0, 1.0, 0.0], "locs" : [[0.5, 0.6], "bottom", [0.1, 0.1]]}]
		}
	},
	"Run" :
	{
	    "vtk_dir" : "../res/from_config/point/",
	    # path to store .vtk files (for visualisation)
	    "n_iter" : 600,
	    # total number of iterations simulated
	    "ipf" : 5,
	    # will produce .vtk output every ipf iteration
	    "courant" : 0.5,
	    # must specify one of "courant" or "timestep"
	    # "courant" : c --- sets timestep so that courant number
	    # is c (according to our estimate of wave propagation speed)
	    # "timestep" : dt --- sets timestep dt in the solver
	    "solver" : "factorized"
	    # defines the algorithm used at timestep
	    # "factroized" --- factorizes matrix beforehand (LU decomposition by scipy.sparse.linalg.factorized)
		#"Load": "[0., 0., where(sqrt((x - 0.5)**2 + (y - 0.5)**2) < 1e-2, 1e8, 0.)]"
	}
}
